<!DOCTYPE html>
<html lang="zh-CN">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<title>抖音视频下载器</title>
		<style>
			* {
				margin: 0;
				padding: 0;
				box-sizing: border-box;
			}

			body {
				font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
				background: linear-gradient(135deg, #667eea, #764ba2);
				min-height: 100vh;
				color: #333;
				padding: 20px;
			}

			/* 页面加载动画样式 */
			.page-loading {
				position: fixed;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				background: linear-gradient(135deg, #667eea, #764ba2);
				display: flex;
				flex-direction: column;
				justify-content: center;
				align-items: center;
				z-index: 9999;
				transition:
					opacity 0.8s ease,
					visibility 0.8s ease;
			}

			.page-loading.hidden {
				opacity: 0;
				visibility: hidden;
			}

			.loading-content {
				text-align: center;
				color: white;
			}

			.loading-logo {
				font-size: 4rem;
				margin-bottom: 20px;
				animation: bounce 2s infinite;
			}

			.loading-title {
				font-size: 2rem;
				font-weight: 700;
				margin-bottom: 10px;
				opacity: 0.9;
			}

			.loading-subtitle {
				font-size: 1rem;
				opacity: 0.7;
				margin-bottom: 40px;
			}

			.loading-spinner {
				position: relative;
				width: 60px;
				height: 60px;
				margin: 0 auto;
			}

			.loading-spinner::before {
				content: '';
				position: absolute;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				border: 4px solid rgba(255, 255, 255, 0.2);
				border-top: 4px solid white;
				border-radius: 50%;
				animation: spin 1s linear infinite;
			}

			@keyframes bounce {
				0%,
				20%,
				50%,
				80%,
				100% {
					transform: translateY(0);
				}
				40% {
					transform: translateY(-15px);
				}
				60% {
					transform: translateY(-8px);
				}
			}

			@keyframes spin {
				0% {
					transform: rotate(0deg);
				}
				100% {
					transform: rotate(360deg);
				}
			}

			/* 主应用样式 - 初始隐藏 */
			#app {
				opacity: 0;
				transition: opacity 0.6s ease;
			}

			#app.loaded {
				opacity: 1;
			}

			.container {
				max-width: 800px;
				margin: 0 auto;
			}

			/* 头部样式 */
			.header {
				text-align: center;
				margin-bottom: 40px;
				color: white;
			}

			.logo {
				font-size: 3rem;
				margin-bottom: 15px;
			}

			.title {
				font-size: 2.5rem;
				font-weight: 700;
				margin-bottom: 10px;
			}

			.subtitle {
				opacity: 0.8;
				font-size: 1.1rem;
			}

			/* 卡片样式 */
			.card {
				background: rgba(255, 255, 255, 0.15);
				backdrop-filter: blur(20px);
				border-radius: 20px;
				border: 1px solid rgba(255, 255, 255, 0.2);
				padding: 30px;
				margin-bottom: 30px;
				box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
			}

			/* 表单样式 */
			.form-group {
				margin-bottom: 25px;
			}

			.label {
				color: rgba(255, 255, 255, 0.9);
				font-weight: 600;
				margin-bottom: 10px;
				display: flex;
				align-items: center;
				gap: 8px;
			}

			.input {
				width: 100%;
				padding: 8px 10px;
				border: 2px solid rgba(255, 255, 255, 0.2);
				border-radius: 15px;
				background: rgba(255, 255, 255, 0.1);
				color: white;
				font-size: 1rem;
				transition: all 0.3s ease;
				min-height: 120px;
				resize: vertical;
			}

			.input:focus {
				outline: none;
				border-color: rgba(255, 255, 255, 0.5);
				background: rgba(255, 255, 255, 0.15);
			}

			.input::placeholder {
				color: rgba(255, 255, 255, 0.5);
			}

			/* 按钮样式 */
			.btn {
				width: 100%;
				padding: 15px;
				border: none;
				border-radius: 15px;
				font-size: 1.1rem;
				font-weight: 600;
				cursor: pointer;
				transition: all 0.3s ease;
				display: flex;
				align-items: center;
				justify-content: center;
				gap: 10px;
			}

			.btn-primary {
				background: linear-gradient(135deg, #ff6b6b, #ee5a24);
				color: white;
			}

			.btn-primary:hover:not(:disabled) {
				transform: translateY(-2px);
				box-shadow: 0 10px 25px rgba(255, 107, 107, 0.3);
			}

			.btn-success {
				background: linear-gradient(135deg, #10ac84, #00d2d3);
				color: white;
			}

			.btn-success:hover {
				transform: translateY(-2px);
			}

			.btn:disabled {
				opacity: 0.7;
				cursor: not-allowed;
			}

			/* 加载动画 */
			.spinner {
				width: 20px;
				height: 20px;
				border: 2px solid rgba(255, 255, 255, 0.3);
				border-top: 2px solid white;
				border-radius: 50%;
				animation: spin 1s linear infinite;
			}

			/* 结果展示区域 */
			.results {
				margin-top: 30px;
			}

			.result-header {
				color: white;
				font-weight: 600;
				font-size: 1.2rem;
				margin-bottom: 20px;
				display: flex;
				align-items: center;
				gap: 10px;
			}

			/* 媒体预览样式 */
			.media-preview {
				background: rgba(255, 255, 255, 0.05);
				border-radius: 15px;
				padding: 20px;
				margin-bottom: 20px;
				user-select: none;
			}

			.video-container {
				position: relative;
				border-radius: 15px;
				overflow: hidden;
				margin-bottom: 20px;
			}

			.video-cover {
				width: 100%;
				height: 300px;
				object-fit: cover;
			}

			.play-btn {
				position: absolute;
				top: 50%;
				left: 50%;
				transform: translate(-50%, -50%);
				width: 60px;
				height: 60px;
				background: rgba(255, 255, 255, 0.9);
				border-radius: 50%;
				display: flex;
				align-items: center;
				justify-content: center;
				font-size: 1.5rem;
			}

			/* 图片网格 */
			.image-grid {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
				gap: 15px;
				margin-bottom: 20px;
			}

			.image-item {
				border-radius: 10px;
				overflow: hidden;
			}

			.image-item img {
				width: 100%;
				height: auto;
				display: block;
			}

			/* 信息展示 */
			.info-display {
				background: rgba(255, 255, 255, 0.1);
				border-radius: 15px;
				padding: 20px;
				color: white;
				white-space: pre-wrap;
				font-family: monospace;
				font-size: 0.9rem;
				line-height: 1.4;
				max-height: 300px;
				overflow-y: auto;
			}

			.error {
				background: rgba(255, 107, 107, 0.2);
				border: 1px solid rgba(255, 107, 107, 0.3);
				color: #ffcccb;
			}

			/* 使用说明 */
			.tips {
				background: rgba(255, 255, 255, 0.1);
				border-radius: 20px;
				padding: 30px;
				color: white;
			}

			.tips h3 {
				margin-bottom: 15px;
				display: flex;
				align-items: center;
				gap: 8px;
			}

			.tips ul {
				list-style: none;
			}

			.tips li {
				margin-bottom: 10px;
				display: flex;
				align-items: flex-start;
				gap: 10px;
				line-height: 1.5;
			}

			.tips li::before {
				content: '✨';
				flex-shrink: 0;
			}

			/* 响应式 */
			@media (max-width: 768px) {
				.loading-logo {
					font-size: 3rem;
				}

				.loading-title {
					font-size: 1.5rem;
				}

				.title {
					font-size: 2rem;
				}

				.card {
					padding: 20px;
				}

				.work-meta {
					grid-template-columns: repeat(2, 1fr);
				}
			}

			/* Vue过渡 */
			.fade-enter-active,
			.fade-leave-active {
				transition: opacity 0.5s ease;
			}

			.fade-enter-from,
			.fade-leave-to {
				opacity: 0;
			}

			.slide-enter-active {
				transition: all 0.4s ease-out;
			}

			.slide-enter-from {
				opacity: 0;
				transform: translateY(20px);
			}
		</style>
	</head>
	<body>
		<!-- 页面加载动画 -->
		<div id="pageLoading" class="page-loading">
			<div class="loading-content">
				<div class="loading-logo">🎵</div>
				<h1 class="loading-title">抖音视频下载器</h1>
				<p class="loading-subtitle">正在加载页面，请稍候...</p>
				<div class="loading-spinner"></div>
			</div>
		</div>

		<!-- 主应用 -->
		<div id="app">
			<div class="container">
				<!-- 头部 -->
				<div class="header">
					<div class="logo">🎵</div>
					<h1 class="title">抖音视频下载器</h1>
					<p class="subtitle">快速解析并下载抖音视频，支持无水印下载</p>
				</div>

				<!-- 主要表单 -->
				<div class="card">
					<form @submit.prevent="parseVideo">
						<div class="form-group">
							<label class="label">
								<span>📱</span>
								输入抖音分享链接
							</label>
							<textarea
								v-model="shareText"
								class="input"
								placeholder="请粘贴完整的抖音分享内容或链接..."
								required
								ref="textareaRef"
							></textarea>
						</div>

						<button
							type="button"
							class="btn btn-primary"
							@click="parseVideo"
							:disabled="isLoading"
						>
							<div v-show="isLoading" class="spinner"></div>
							<span v-show="!isLoading">🔍</span>
							<span>{{ isLoading ? '正在解析...' : '解析视频' }}</span>
						</button>
					</form>
				</div>

				<!-- 解析结果 -->
				<transition name="slide">
					<div v-show="showResults" class="results">
						<!-- 视频预览 -->
						<transition name="fade">
							<div v-show="videoData" class="card">
								<div class="result-header">
									<span>🎬</span>
									视频预览
								</div>
								<div class="media-preview">
									<div class="video-container">
										<img
											:src="videoData?.coverUrl"
											class="video-cover"
											alt="视频封面"
										/>
										<div class="play-btn">▶️</div>
									</div>
									<button class="btn btn-success" @click="downloadVideo">
										<span>📥</span>
										下载视频
									</button>
								</div>
							</div>
						</transition>

						<!-- 图片预览 -->
						<transition name="fade">
							<div v-show="imageData && imageData.length > 0" class="card">
								<div class="result-header">
									<span>🖼️</span>
									图片预览 ({{ imageData.length }}张)
								</div>
								<div class="media-preview">
									<div class="image-grid">
										<div
											v-for="(image, index) in imageData"
											:key="index"
											class="image-item"
										>
											<img
												:src="image"
												:alt="`图片 ${index + 1}`"
												loading="lazy"
											/>
										</div>
									</div>
									<div style="opacity: 0.7; font-size: 0.9rem">
										💡 长按图片保存到本地
									</div>
								</div>
							</div>
						</transition>

						<!-- 详细信息 -->
						<transition name="fade">
							<div v-show="infoData" class="card">
								<div class="result-header">
									<span>{{ infoData?.isError ? '❌' : '📋' }}</span>
									<span>{{ infoData?.title || '详细信息' }}</span>
								</div>
								<div class="info-display" :class="{ 'error': infoData?.isError }">
									{{ infoData?.content }}
								</div>
							</div>
						</transition>
					</div>
				</transition>

				<!-- 使用说明 -->
				<div class="card tips">
					<h3>
						<span>💡</span>
						使用说明
					</h3>
					<ul>
						<li>在抖音APP中找到视频，点击分享按钮</li>
						<li>选择"复制链接"，粘贴到上方输入框</li>
						<li>点击解析按钮，查看作品信息和预览</li>
						<li>视频可一键下载，图片可长按保存</li>
					</ul>
				</div>
			</div>
		</div>

		<!-- Vue 3 CDN -->
		<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
		<script>
			// 页面加载完成后的处理
			function initApp() {
				const { createApp, ref, onMounted, nextTick } = Vue

				const app = createApp({
					setup() {
						// 响应式数据
						const shareText = ref('')
						const isLoading = ref(false)
						const showResults = ref(false)
						const videoData = ref(null)
						const imageData = ref([])
						const infoData = ref(null)
						const textareaRef = ref(null)
						const allData = ref(null)

						// 清理结果
						const clearResults = () => {
							videoData.value = null
							imageData.value = []
							infoData.value = null
						}

						// 滚动到结果
						const scrollToResults = () => {
							nextTick(() => {
								const results = document.querySelector('.results')
								if (results) {
									results.scrollIntoView({ behavior: 'smooth', block: 'nearest' })
								}
							})
						}

						// 显示信息
						const showInfo = (title, content, isError = false) => {
							infoData.value = { title, content, isError }
							showResults.value = true
							scrollToResults()
						}

						// 显示视频
						const showVideo = (coverUrl, downloadUrl) => {
							videoData.value = { coverUrl, downloadUrl }
							showResults.value = true
							scrollToResults()
						}

						// 显示图片
						const showImages = (images) => {
							imageData.value = images
							showResults.value = true
							scrollToResults()
						}

						// 下载视频
						const downloadVideo = () => {
							console.log('Download video:', allData.value)
							const url = `/api/download-stream?url=${encodeURIComponent(allData.value.url)}&title=${encodeURIComponent(allData.value.video_id)}`
							window.location.href = url
						}

						// 解析视频
						const parseVideo = async () => {
							const text = shareText.value.trim()
							if (!text) {
								alert('请输入抖音分享内容！')
								textareaRef.value?.focus()
								return
							}

							isLoading.value = true
							clearResults()
							showInfo('解析中', '正在解析视频信息，请稍候...')

							try {
								const response = await fetch('/api/parse', {
									method: 'POST',
									headers: {
										'Content-Type': 'application/x-www-form-urlencoded',
										Accept: 'application/json'
									},
									body: `shareText=${encodeURIComponent(text)}`
								})

								if (!response.ok) {
									const errorText = await response.text()
									throw new Error(`服务器错误 (${response.status}): ${errorText}`)
								}

								const result = await response.json()

								if (result.success) {
									const data = result.data
									allData.value = data
									// 根据类型显示内容
									if (
										data.aweme_type == 2 &&
										data.allImg &&
										data.allImg.length > 0
									) {
										// 图片
										showImages(data.allImg)
										infoData.value = null // 清除loading信息
									} else if (data.aweme_type == 4 && data.cover) {
										// 视频
										const coverUrl = Array.isArray(data.cover)
											? data.cover[0]
											: data.cover
										const videoUrl = data.url
										showVideo(coverUrl, videoUrl)
										infoData.value = null // 清除loading信息
									} else {
										// 显示原始数据
										showInfo('解析完成', JSON.stringify(result, null, 2))
									}
								} else {
									clearResults()
									showInfo(
										'解析失败',
										result.message || '解析过程中出现错误',
										true
									)
								}
							} catch (error) {
								console.error('Parse error:', error)
								clearResults()
								showInfo(
									'解析失败',
									`网络请求失败: ${error.message}\n\n请检查网络连接或稍后重试`,
									true
								)
							} finally {
								isLoading.value = false
							}
						}

						// 键盘事件
						const handleKeydown = (e) => {
							if (e.ctrlKey && e.key === 'Enter') {
								parseVideo()
							}
						}

						// 初始化
						onMounted(() => {
							textareaRef.value?.focus()
							document.addEventListener('keydown', handleKeydown)
						})

						return {
							shareText,
							isLoading,
							showResults,
							videoData,
							imageData,
							infoData,
							textareaRef,
							parseVideo,
							downloadVideo
						}
					}
				})

				app.mount('#app')

				// 显示主应用，隐藏loading
				setTimeout(() => {
					const appElement = document.getElementById('app')
					const loadingElement = document.getElementById('pageLoading')

					appElement.classList.add('loaded')
					loadingElement.classList.add('hidden')

					// 完全移除loading元素
					setTimeout(() => {
						loadingElement.remove()
					}, 800)
				}, 500) // 延迟500ms确保Vue完全初始化
			}

			// Vue加载完成后初始化应用
			if (typeof Vue !== 'undefined') {
				initApp()
			} else {
				// 如果Vue还没加载完成，等待加载
				document.addEventListener('DOMContentLoaded', () => {
					const checkVue = setInterval(() => {
						if (typeof Vue !== 'undefined') {
							clearInterval(checkVue)
							initApp()
						}
					}, 50)
				})
			}
		</script>
	</body>
</html>
